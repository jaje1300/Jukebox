//File created on 04/22/2015 10:50 PM
//Author: Jacob J
// Created: 2015-04-22
// Last edited: 2015-04-27
// Description: Implemenation with class deinitions for Menu.h
// Name: Menu.cpp
#include "Menu.h"

//***************************************************************************************************************************************************************************************
//Constructors & destructor
//***************************************************************************************************************************************************************************************
//
//_______________________________________________________________________________________________________________________________________________________________________________________
//Name: Menu
//Task: Default constructor
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Menu::Menu()
{
	menuItem;
	menuHeading;
}
//_______________________________________________________________________________________________________________________________________________________________________________________
//Name: Menu
//Task: Initiate data members
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Menu::Menu(vector<MenuItem> pMenuItem, string pMenuHeading){
	menuItem = pMenuItem;
	menuHeading = pMenuHeading;
}
//_______________________________________________________________________________________________________________________________________________________________________________________
//Name: ~Menu
//Task: Destructor
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Menu::~Menu()
{
}


//***************************************************************************************************************************************************************************************
//SET function definitions
//***************************************************************************************************************************************************************************************
//_______________________________________________________________________________________________________________________________________________________________________________________
//Name: setMenuItem
//Task: Takes MenuItem object and adds to class element
//Input: vector<MenuItem> pMenuItem
//Output: 
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void Menu::setMenuItem(const vector<MenuItem> pMenuItem){
	menuItem = pMenuItem;
}
//_______________________________________________________________________________________________________________________________________________________________________________________
//Name: setMenuHeading
//Task: Takes string and adds to class element
//Input: string pMenuHeading
//Output: 
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void Menu::setMenuHeading(const string pMenuHeading){
	menuHeading = pMenuHeading;
}
//_______________________________________________________________________________________________________________________________________________________________________________________
//Name: setEnabled
//Task: Takes string and bool value in order to modify MenuItem class element by finding it using find_if agorithm
//Input: string menuText, bool enabled
//Output: 
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void Menu::setEnabled(const string menuText, const bool enabled){
	vector<MenuItem>::iterator it = find_if(menuItem.begin(), menuItem.end(), [menuText](const MenuItem &Mi1){return Mi1.getMenuText() == menuText; });
	if (it != menuItem.end()){
		it->setEnabled(enabled);
	}
}
//_______________________________________________________________________________________________________________________________________________________________________________________
//Name: getEnabled
//Task: Takes string and bool value in order to check bool value of MenuItem class element by finding it using find_if algorithm
//Input: string menuText, bool enabled
//Output: bool value (enabled or disabled)
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
bool Menu::getEnabled(const string menuText){
	vector<MenuItem>::iterator it = find_if(menuItem.begin(), menuItem.end(), [menuText](const MenuItem &Mi1){return Mi1.getMenuText() == menuText; });
	if (it != menuItem.end()){
		return it->getEnabled();
	}
	return false;
}

//***************************************************************************************************************************************************************************************
//Member function definitions
//***************************************************************************************************************************************************************************************
//_______________________________________________________________________________________________________________________________________________________________________________________
//Name: addItem
//Task: Adds menuItem
//Input: string menuText, bool enabled
//Output: 
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void Menu::addItem(const string menuText, const bool enabled){
	MenuItem tmpItem;
	tmpItem.setMenuText(menuText);
	tmpItem.setEnabled(enabled);

	menuItem.push_back(tmpItem);
}
//_______________________________________________________________________________________________________________________________________________________________________________________
//Name: printMenuItems
//Task: prints menu items
//Input: 
//Output: 
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void Menu::printMenuItems()const{
	cout << "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n";
	int i = 1;
	cout << menuHeading << endl << endl;
	for (auto idx : menuItem){
		cout << " " << i << ". " << idx.getMenuText() << endl;
		i++;
	}
}
//_______________________________________________________________________________________________________________________________________________________________________________________
//Name: getMenuchoice
//Task: returns user input: choice of menu item
//Input: 
//Output: char choice 
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
char Menu::getMenuchoice()const{
	char choice;
	cout << endl << endl << "My choice: ";
	cin >> choice;

	return choice;
}
//_______________________________________________________________________________________________________________________________________________________________________________________









//***************************************************************************************************************************************************************************************
