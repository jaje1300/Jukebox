//File created on 04/22/2015 09:55 PM
//Author: Jacob J
// Created: 2015-04-22
// Last edited: 2015-04-27
// Description: Implementation with definitions for album.h
// Name: Album.cpp
#include "Album.h"

//***************************************************************************************************************************************************************************************
//Constructors & destructor
//***************************************************************************************************************************************************************************************
//
//_______________________________________________________________________________________________________________________________________________________________________________________
//Name: Album
//Task: Default constructor
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Album::Album()
{
	name;
	songlist;
}
//_______________________________________________________________________________________________________________________________________________________________________________________
//Name: Album
//Task: Initiate data members
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Album::Album(string pName, vector<Song>pSonglist){
	name = pName;
	songlist = pSonglist;
}
//_______________________________________________________________________________________________________________________________________________________________________________________
//Name: ~Album
//Task: Destructor
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Album::~Album()
{
}
//_______________________________________________________________________________________________________________________________________________________________________________________


//***************************************************************************************************************************************************************************************
//SET function definitions
//***************************************************************************************************************************************************************************************
//_______________________________________________________________________________________________________________________________________________________________________________________
//Name: setName
//Task: Takes string and adds to class element
//Input: string pName
//Output: 
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void Album::setName(const string pName){
	name = pName;
}
//_______________________________________________________________________________________________________________________________________________________________________________________
//Name: setSonglist
//Task: Takes vector<Song> and adds to class element
//Input: vector<Song> pSonglist
//Output: 
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void Album::setSonglist(const vector<Song> pSonglist){
	songlist = pSonglist;
}
//_______________________________________________________________________________________________________________________________________________________________________________________


//***************************************************************************************************************************************************************************************
//Member function definitions
//***************************************************************************************************************************************************************************************
//_______________________________________________________________________________________________________________________________________________________________________________________
//Name: addSong
//Task: Takes Song object and adds to class element
//Input: Song pSong
//Output: 
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void Album::addSong(const Song pSong){
	songlist.push_back(pSong);
}
//_______________________________________________________________________________________________________________________________________________________________________________________
//Name: getFormatedTime
//Task: Takes Time object and returns a formated string for output
//Input: Time pSong
//Output: string tmpString
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
string Album::getFormatedTime(const Time pTime)const{
	string tmpString;

	//format output as HH:MM:SS: really as (H)H:MM:SS or (M)M:SS as per requirements specification
	if (pTime.getHours() > 0){
		tmpString = to_string(pTime.getHours()) += ":";

		if (pTime.getMinutes() >= 10){
			tmpString += to_string(pTime.getMinutes()) += ":";
		}
		else{
			tmpString += "0";
			tmpString += to_string(pTime.getMinutes()) += ":";
		}
	}
	else {
		tmpString += to_string(pTime.getMinutes()) += ":";
	}

	if (pTime.getSeconds() >= 10){
		tmpString += to_string(pTime.getSeconds());
	}
	else{
		tmpString += "0";
		tmpString += to_string(pTime.getSeconds());
	}

	return tmpString;
}
//_______________________________________________________________________________________________________________________________________________________________________________________


//***************************************************************************************************************************************************************************************
//Overload operator definitions
//***************************************************************************************************************************************************************************************
//_______________________________________________________________________________________________________________________________________________________________________________________
//Name: operator<
//Task: Overload '<' to compare total length of albums
//Input: 
//Output: return Album object
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
bool Album::operator<(const Album &album) const{
	Time t1, t2;

	for (auto idx : songlist){
		t1 = t1 + idx.getTime();
	}
	for (auto idx : album.songlist){
		t2 = t2 + idx.getTime();
	}
	
	return t1 < t2;
}
//_______________________________________________________________________________________________________________________________________________________________________________________



//***************************************************************************************************************************************************************************************
//Stand-alone function definitions
//***************************************************************************************************************************************************************************************
//overloads********
//_______________________________________________________________________________________________________________________________________________________________________________________
//Name: operator<<
//Task: Overload '<<' to print time objects together
//Input: 
//Output: return os
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
ostream &operator<<(ostream &os, const Album &album){
	const char DELIM = '|';

	os << album.getName() << endl;
	os << album.getSonglist().size() << endl;
	for (auto idx : album.getSonglist()){
		os << idx.getTitle() << DELIM << idx.getArtist() << DELIM << idx.getTime() << endl;
	}

	return os;
}
//_______________________________________________________________________________________________________________________________________________________________________________________
//Name: operator>>
//Task: Overload '>>' to read elements to file
//Input: istream &is, Album &album
//Output: return is
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
istream &operator>>(istream &is, Album &album){
	string tmpString;
	int amountOfSongs = 0;
	Song tmpSong;

	getline(is, tmpString);							
	is >> amountOfSongs;
	is.get();										

	album.setName(tmpString);
	for (int i = 0; i < amountOfSongs; i++){
		is >> tmpSong;
		album.addSong(tmpSong);
	}

	return is;
}
//_______________________________________________________________________________________________________________________________________________________________________________________
// sorting functions****
//_______________________________________________________________________________________________________________________________________________________________________________________
//Name: compareNames
//Task: help sort list by names (alphabetically, case sensitive)
//Input: const Album& lhs, const Album& rhs
//Output: bool value (name1 < name2)
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
bool compareNames(const Album& lhs, const Album& rhs){
	string name1 = lhs.getName();
	string name2 = rhs.getName();

	return name1 < name2;
}
//_______________________________________________________________________________________________________________________________________________________________________________________





//***************************************************************************************************************************************************************************************
